
[General]
	#The number of item stacks held in a basic unit of storage.
	#1x1 drawers hold 8 units, 1x2 drawers hold 4 units, 2x2 drawers hold 2 units.
	#Half-depth drawers hold half those amounts.
	baseStackStorage = 2
	#Controller range defines how far away a drawer can be connected
	#on X, Y, or Z planes.  The default value of 50 gives the controller a very
	#large range, but not beyond the chunk load distance.
	#Range: 1 ~ 75
	controllerRange = 50
	enableUI = true
	enableSidedInput = true
	enableSidedOutput = true
	enableExtraCompactingRules = true
	debugTrace = false
	compactingRules = ["minecraft:clay, minecraft:clay_ball, 4"]
	#Whether redstone upgrades should emit an analog redstone signal, requiring
	#the use of a comparator to read it.
	enableAnalogRedstone = true
	#Allows drawers to be pulled from their block and inserted into another block.
	enableDetachedDrawers = false
	#Drawers track the capacity upgrades from the block they were taken from.
	#Drawers can only be placed back into a block with the same or lower max capacity.
	#Drawers can still only be inserted into a block with enough capacity for the items held.
	forceDetachedDrawersMaxCapacityCheck = true
	#If enabled, carrying filled drawers in your inventory gives slowness debuff,
	#unless a Portability Upgrade is used.
	heavyDrawers = false
	#If enabled, players can lock drawer interactions to just themselves.
	enablePersonalKey = true
	enableItemConversion = true
	#If enabled, limits framing materials to solid, opaque blocks [by best effort]
	restrictFramingMaterials = true
	#If enabled, allows drawers with contents to be stored in another drawer block
	enableStoreFilledDrawers = false
	#
	#Each entry should be a namespace or fully namespaced item, e.g. minecraft:cobblestone
	#Any items on the blacklist are prevented from being stored in drawers
	storeBlacklist = ["storagedrawers:creative_vending_upgrade", "sophisticatedbackpacks"]

[StorageUpgrades]
	level1Mult = 4
	level2Mult = 16
	level3Mult = 64
	level4Mult = 256
	level5Mult = 1024
	#Balance upgrades allow same-item slots to balance out their amounts when items are
	#added or removed from a lot.  Works across networks when acting through a controller.
	enableBalanceUpgrade = true
	#Storage upgrades increase capacity of drawers.
	enableStorageUpgrade = true
	#Fill level upgrades add fill bars to the faces of drawers.
	enableFillLevelUpgrade = true
	#Adds redstone output to drawers based on fill levels.
	enableRedstoneUpgrade = true
	#Renders drawer labels brighter than the surrounding environment would allow.
	enableIlluminationUpgrade = true
	#Causes drawers to accept but void compatible items when they are filled to capacity.
	enableVoidUpgrade = true
	#Allows drawers with contents to be freely carried when heavy drawers is enabled.
	enablePortabilityUpgrade = true
	#Allows a single drawer to connect to a controller remotely.
	enableRemoteUpgrade = true
	#Allows a drawer and all drawers connected to it to connect to a controller remotely.
	enableRemoteGroupUpgrade = true

[Integration]
	#When true, shows quantity as NxS + R (by stack size) rather than count
	wailaStackRemainder = true
	#When true, does not show current quantities unless quantify key was used
	wailaRespectQuantifyKey = true

[Conversion]
	#
	#Each type will be combined with each material to create a set of whitelist entries.
	#This is mainly a convenience for common ore-based materials.
	oreTypeWhitelist = ["forge:storage_blocks", "forge:ingots", "forge:nuggets"]
	#
	#Each type will be combined with each material to create a set of whitelist entries.
	#This is mainly a convenience for common ore-based materials.
	oreMaterialWhitelist = ["aluminum", "constantan", "steel", "uranium", "invar", "tin", "lead", "silver", "platinum", "nickel", "osmium", "bronze", "electrum"]
	#
	#Each whitelist entry should be a fully namespaced tag, e.g. c:ingots/copper
	tagWhitelist = []
	#
	#Each blacklist entry should be a fully namespaced tag, e.g. c:ingots/copper.
	#All items not on the whitelist are blacklisted implicitly.  This can be used to exclude
	#specific entries created from the ore whitelist set.
	tagBlacklist = []
	#
	#Each entry is a semicolon-separated list of fully-namespaced items. All items within the
	#same entry are considered equivalent and convertible/interchangeable.
	#Example: ["thermal:nickel_ore;immersiveengineering:ore_nickel"]
	itemEquivalenceGroups = []

